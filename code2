hour <- read_csv("C:/Users/Admin/Desktop/hour.csv")

hour = hour %>% 
  mutate(season = as_factor(as.character(season))) %>%
  mutate(season = fct_recode(season, "Spring" = "1", "Summer" = "2", "Fall" = "3", "Winter" = "4")) %>% 
  mutate(yr = as_factor(as.character(yr)), hr = as_factor(as.character(hr)), mnth = as_factor(as.character(mnth))) %>% 
  mutate(holiday = as_factor(as.character(holiday))) %>% 
  mutate(holiday = fct_recode(holiday, "Holiday" = "1", "NotHoliday" = "0")) %>% 
  mutate(workingday = as_factor(as.character(workingday))) %>% 
  mutate(workingday = fct_recode(workingday, "WorkingDay" = "1", "NotWorkingDay" = "0")) %>% 
  mutate(weathersit = as_factor(as.character(weathersit))) %>% 
  mutate(weathersit = fct_recode(weathersit, "NoPrecip" = "1", "Misty" = "2", "LightPrecip" = "3", "HeavyRain" = "4")) %>% 
  mutate(weekday = as_factor(as.character(weekday))) %>% 
  mutate(weekday = fct_recode(weekday, "Sunday" = "0", "Monday" = "1", "Tuesday" = "2", "Wednesday" = "3", "Thursday" = "4", "Friday" = "5", "Saturday" = "6"))

library(caret)

#Shawn, his lecture material will have all the answers to the tasks. It's in a short 10-15 min video. He also provides 
#R code to use as a template. The code above is a copy of the last assignments data setup which I have just copy/pasted.
#This assignment isn't too difficult. Just follow his lecture as you answer the tasks and you'll be fine.

#TASK 1#
set.seed(12345)
train.rows = createDataPartition(y = hour$instant, p=0.7, list = FALSE) #70% in training
train = hour[train.rows,] 
test = hour[-train.rows,]

#TASK 2#

#TASK 3#
attach(hour)
model <- lm(count ~ season + mnth + hr + holiday + weekday + temp + weathersit)
summary(model)

#
#R-Squared is a statistical measure of fit that indicates how much variation of a dependent variable is explained by the 
#independent variable(s) in a regression model.
#
#Use the definition above to answer task question


#TASK 4#
train_preds = predict(model, newdata = train)
head(train_preds)

#COMMENT ON THE RESULTS#


#TASK 5#
test_preds = predict(model, newdata = test)
head(test_preds)


#COMMENT ON THE RESULTS#

#TASK 6#
SSE = sum((test$AnnualCharges - test_preds)^2) #sum of squared residuals from model
SST = sum((test$AnnualCharges - mean(test$AnnualCharges))^2) #sum of squared residuals from a "naive" model
1 - SSE/SST #definition of R squared

#TASK 7#
