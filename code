#ASSIGNMENT 1#

###TASK 7###
library(tidyverse)

air = airquality
air2 = air %>% filter(!is.na(Ozone)) %>% filter(!is.na(Solar.R))

x=air2$Temp
y=air2$Ozone

model1 = lm(y~x)
predict(model1, data.frame("x"=80), interval = 'p')


#ASSIGNMENT 2#

#TASK 1#
#install.packages(pkgs=c("GGally","MASS","leaps"))
library(readr)
bike0 <- read_csv("hour.csv")

# Each of these mutate()'s contain a statement that modifies a variable in the dataset.
# as_factor & as.character convert the variable to either character (instead of numeric) & to factors.
# We're converting some of them to factors because we want to differentiate between the values in each variable.
# For example, we might want to see the linear model based on each season (factor).
# fct_recode is essentially just renaming values.

bike1 = bike0 %>% 
  mutate(season = as_factor(as.character(season))) %>%
  mutate(season = fct_recode(season, "Spring" = "1", "Summer" = "2", "Fall" = "3", "Winter" = "4")) %>% 
  mutate(yr = as_factor(as.character(yr)), hr = as_factor(as.character(hr)), mnth = as_factor(as.character(mnth))) %>% 
  mutate(holiday = as_factor(as.character(holiday))) %>% 
  mutate(holiday = fct_recode(holiday, "Holiday" = "1", "NotHoliday" = "0")) %>% 
  mutate(workingday = as_factor(as.character(workingday))) %>% 
  mutate(workingday = fct_recode(workingday, "WorkingDay" = "1", "NotWorkingDay" = "0")) %>% 
  mutate(weathersit = as_factor(as.character(weathersit))) %>% 
  mutate(weathersit = fct_recode(weathersit, "NoPrecip" = "1", "Misty" = "2", "LightPrecip" = "3", "HeavyRain" = "4")) %>% 
  mutate(weekday = as_factor(as.character(weekday))) %>% 
  mutate(weekday = fct_recode(weekday, "Sunday" = "0", "Monday" = "1", "Tuesday" = "2", "Wednesday" = "3", "Thursday" = "4", "Friday" = "5", "Saturday" = "6"))

#TASK 2#
df <- select_if(bike1, is.numeric)
cormatrix <- cor(df)[1:6,'count']; cormatrix  #don't want the correlation coef of registered or count

#remove unwanted variables#
bike2 <- select(bike1, -c(instant, dteday, registered, casual))

#plots for all categorical variables
ggplot(bike2,aes(x=hr,y=count)) + geom_boxplot()
ggplot(bike2,aes(x=yr,y=count)) + geom_boxplot()
ggplot(bike2,aes(x=mnth,y=count)) + geom_boxplot()
ggplot(bike2,aes(x=holiday,y=count)) + geom_boxplot()
ggplot(bike2,aes(x=weekday,y=count)) + geom_boxplot()
ggplot(bike2,aes(x=workingday,y=count)) + geom_boxplot()
ggplot(bike2,aes(x=weathersit,y=count)) + geom_boxplot()
ggplot(bike2,aes(x=season,y=count)) + geom_boxplot()



#TASK 4#
library(MASS)

allmod <- lm(bike2$count ~., bike2) #use the ~. to include all predictors rather than typing them all in
summary(allmod)

emptymod = lm(bike2$count ~1, bike2) #use ~1 to build an empty model
summary(emptymod)


#Forward stepwise#
forwardmod = stepAIC(emptymod, direction = "forward", scope=list(upper=allmod,lower=emptymod),
                     trace = TRUE) #trace = TRUE shows how the model is built (which variables                                       are added)
summary(forwardmod) #note multicollinearity with FullBath with a negative coefficient

#Task 5#
#Backward stepwise#  
backmod = stepAIC(allmod, direction = "backward", trace = TRUE) #trace = TRUE shows how the model is built (which variables are removed)
summary(backmod)


#Task 6#
bike2 = bike2 %>% mutate(yr = as.integer(yr)-1)


allmod <- lm(bike2$count ~., bike2) #use the ~. to include all predictors rather than typing them all in
summary(allmod)

emptymod = lm(bike2$count ~1, bike2) #use ~1 to build an empty model
summary(emptymod)


#Forward stepwise#
forwardmod = stepAIC(emptymod, direction = "forward", scope=list(upper=allmod,lower=emptymod),
                     trace = TRUE) #trace = TRUE shows how the model is built (which variables                                       are added)
summary(forwardmod) #note multicollinearity with FullBath with a negative coefficient





